<?php

/**
 * @file
 * Primary module hooks for dropai module.
 */

 use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_type_build().
 */
function dropai_entity_type_build(array &$entity_types) {
  // Iterate through all entity types to add the AI Inspector link template that
  // follows the pattern: /dropai/node/{{nid}}/inspect.
  foreach ($entity_types as $name => $type) {
    $type->setLinkTemplate('dropai-inspect', "/dropai/$name/{{$name}}/inspect");
  }
}

/**
 * Implements hook_entity_insert().
 */
function dropai_entity_insert(EntityInterface $entity) {
  dropai_add_item_to_queue_worker($entity, 'insert');
}

/**
 * Implements hook_entity_update().
 */
function dropai_entity_update(EntityInterface $entity) {
  dropai_add_item_to_queue_worker($entity, 'update');
}

/**
 * Implements hook_entity_update().
 */
function dropai_entity_delete(EntityInterface $entity) {
  dropai_add_item_to_queue_worker($entity, 'remove');
}

/**
 * This function adds an item to the queue worker.
 */
function dropai_add_item_to_queue_worker(EntityInterface $entity, string $action) {
  $entity_id = $entity->id();
  $entity_type = $entity->getEntityTypeId();
  $entity_bundle = $entity->bundle();

  // Check by entity type and bundle if the entity allows indexing.
  if (!dropai_check_entity_allows_indexing($entity_type, $entity_bundle)) {
    return;
  }

  // Generates the queue data.
  $item = [
    'entity_id' => $entity_id,
    'entity_type' => $entity_type,
    'action' => $action,
  ];

  // Insert the data into the queue.
  $queue = \Drupal::service('queue')->get('dropai_embedding_queue_worker');
  $queue->createItem($item);
}

/**
 * This function checks if the entity allows indexing.
 */
function dropai_check_entity_allows_indexing(string $entity_type, string $entity_bundle) {
  $dropai_indexing_settings = \Drupal::service('config.factory')->get('dropai.indexing_settings');
  if (is_null($dropai_indexing_settings)) {
    // The settings are not defined yet.
    return FALSE;
  }

  $dropai_indexing_settings = $dropai_indexing_settings->getRawData();
  if (empty($dropai_indexing_settings) || !isset($dropai_indexing_settings['entities'])) {
    // The entities settings is empty.
    return FALSE;
  }

  $indexing_entities = $dropai_indexing_settings['entities'];
  if (!array_key_exists($entity_type, $indexing_entities)) {
    // The entity type is outside the global entities settings.
    return FALSE;
  }

  $entiy_settings = $indexing_entities[$entity_type];
  if ($entiy_settings['index_type'] === 'exclude') {
    if (in_array($entity_bundle, $entiy_settings['bundles'])) {
      // It is FALSE because the bundle is one of the excluded items.
      return FALSE;
    }
    else {
      // It is TRUE because the bundle is NOT one of the excluded items.
      return TRUE;
    }
  }
  elseif ($entiy_settings['index_type'] === 'include') {
    if (in_array($entity_bundle, $entiy_settings['bundles'])) {
      // It is TRUE because the bundle is one of the included items.
      return TRUE;
    }
    else {
      // It is FALSE because the bundle is not one of the included items.
      return FALSE;
    }
  }

  // The index_type is unknown.
  return FALSE;
}

/**
 * Implements hook_theme().
 */
function dropai_theme() {
  return [
    'code_block' => [
      'variables' => [
        'language' => 'plaintext',
        'code' => NULL,
      ],
    ],
    'array_block' => [
      'variables' => [
        'items' => [],
      ],
    ],
  ];
}
