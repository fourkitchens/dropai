<?php

/**
 * @file
 * Primary module hooks for dropai module.
 */

 use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_type_build().
 */
function dropai_entity_type_build(array &$entity_types) {
  // Iterate through all entity types to add the AI Inspector link template that
  // follows the pattern: /dropai/node/{{nid}}/inspect.
  foreach ($entity_types as $name => $type) {
    $type->setLinkTemplate('dropai-inspect', "/dropai/$name/{{$name}}/inspect");
  }
}

/**
 * Implements hook_entity_insert().
 */
function dropai_entity_insert(EntityInterface $entity) {
  dropai_add_item_to_queue_worker($entity, 'insert');
}

/**
 * Implements hook_entity_update().
 */
function dropai_entity_update(EntityInterface $entity) {
  dropai_add_item_to_queue_worker($entity, 'update');
}

/**
 * Implements hook_entity_update().
 */
function dropai_entity_delete(EntityInterface $entity) {
  dropai_add_item_to_queue_worker($entity, 'remove');
}

/**
 * This function adds an item to the queue worker.
 */
function dropai_add_item_to_queue_worker(EntityInterface $entity, string $action) {
  $entity_id = $entity->id();
  $entity_type = $entity->getEntityTypeId();

  if (!in_array($entity_type, ['node'])) {
    return;
  }

  $queue = \Drupal::service('queue')->get('dropai_embedding_queue_worker');

  $item = [
    'entity_id' => $entity_id,
    'entity_type' => $entity_type,
    'action' => $action,
  ];

  $queue->createItem($item);
}

/**
 * Implements hook_theme().
 */
function dropai_theme() {
  return [
    'code_block' => [
      'variables' => [
        'language' => 'plaintext',
        'code' => NULL,
      ],
    ],
    'array_block' => [
      'variables' => [
        'items' => [],
      ],
    ],
  ];
}
